路由器过滤器
路由过滤器支持某种方式修改传入的HTTP请求或是传出的HTTP响应 路由过滤器的范围是某个路由器 跟之前的断言一样 SpringCloudGateway也包含许多内置的路由过滤器工厂
详细列表: https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories

比如外面现在希望在请求到达时 在请求头中添加一些信息在转发给我们的服务 那么这个时候就可以使用路由过滤器来完成 我们只需要对配置文件进行修改:
                    spring:
                      application:
                        name: gateway

                      cloud:
                        gateway:
                          routes:
                          - id: borrow-service
                            uri: lb://borrowservice
                            predicates:
                            - Path=/borrow/**

                          # 继续添加新的路由配置 这里就以书籍管理服务为例
                          # 注意-要对齐routes:
                          - id: book-service
                            uri: lb://bookservice
                            predicates:
                            - Path=/book/**
                            filters:   # 添加过滤器
                            - AddRequestHeader=Test, HelloWorld!
                            # AddRequestHeader 就是添加请求头信息 其他工厂请查阅官网

接着我们在BookController中获取并输出一下 看看是不是成功添加了:
                    @RestController
                    public class BookController {
                        @Resource
                        BookService service;

                        @RequestMapping("/book/{bid}")
                        Book findBookById(@PathVariable("bid") int bid,
                                          HttpServletRequest request){

                            System.out.println(request.getHeader("Test"));
                            return service.getBookById(bid);
                        }

                    }

现在我们通过Gateway访问我们的图书管理服务 可以看到这里成功获取到由网关添加的请求头信息了

除了针对于某一个路由配置过滤器之外 我们也可以自定义全局过滤器 它能够作用于全局 但是我们需要通过代码的方式进行编写 比如我们要实现拦截没有携带指定请求参数的请求:
                    @Component   // 需要注册为Bean
                    public class TestFilter implements GlobalFilter {

                        @Override
                        public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {   // 只需要实现此方法
                            return null;
                        }

                    }

接着我们编写判断:
                    @Override
                    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {

                        // 先获取ServerHttpRequest对象 注意不是HttpServletRequest
                        ServerHttpRequest request = exchange.getRequest();
                        // 打印一下所有的请求参数
                        System.out.println(request.getQueryParams());'

                        // 判断是否包含test参数 且参数值为1
                        List<String> value = request.getQueryParams().get("test");
                        if(value != null && value.contains("1")) {
                            // 将ServerWebExchange向过滤链的下一级传递(跟JavaWeb中介绍的过滤器其实是差不多的)
                            return chain.filter(exchange);
                        }else {
                            // 直接在这里不再向下传递 然后返回响应
                            return exchange.getResponse().setComplete();
                        }

                    }

访问浏览器 可以看到结果 成功实现规则判断和拦截操作

当然 过滤器肯定是可以存在很多个的 所以我们可以手动指定过滤器之间的顺序
                    @Component
                    public class TestFilter implements GlobalFilter, Ordered {   // 实现Ordered接口

                        @Override
                        public int getOrder() {
                            return 0;
                        }

                    }

注意: Order的值越小优先级越高 并且无论是在配置文件中编写的单个路由过滤器还是全局路由过滤器 都会受到Order值影响
(单个路由的过滤器Order值按从上往下的顺序从1开始递增) 最终是按照Order值决定哪个过滤器优先执行 当Order值一样时 全局路由过滤器执行 优于 单独的路由过滤器执行

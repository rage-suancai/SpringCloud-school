OpenFeign实现负载均衡
官方文档: https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/

Feign和RestTemplate一样 也是HTTP客户端请求工具 但是它的使用方式更加便捷 首先是依赖:
                    <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-openfeign</artifactId>
                    </dependency>

接着在启动类添加@EnableFeignClients注解:
                    @SpringBootApplication
                    @EnableFeignClients
                    public class BorrowApplication {

                        public static void main(String[] args) {
                            SpringApplication.run(BorrowApplication.class, args);
                        }

                    }

那么现在我们需要调用其他微服务提供的接口 该怎么做呢 我们直接创建一个对应服务的接口类即可:
                    @FeignClient("userservice")   // 声明为userservice服务的HTTP请求客户端
                    public interface UserClient {

                    }

接着我们直接创建所需类型的方法 比如我们之前的:
                    RestTemplate template = new RestTemplate();
                    User user = template.getForObject("http://userservice/user/"+uid, User.class);

现在可以直接写成这样:
                    @FeignClient("userservice")
                    public interface UserClient {

                      	// 路径保证和其他微服务提供的一致即可
                        @RequestMapping("/user/{uid}")
                        User getUserById(@PathVariable("uid") int uid);  //参数和返回值也保持一致

                    }

接着我们直接注入使用(有Mybatis那味了):
                    @Resource
                    UserClient userClient;

                    @Override
                    public UserBorrowDetail getUserBorrowDetailByUid(int uid) {
                        List<Borrow> borrow = mapper.getBorrowsByUid(uid);

                        User user = userClient.getUserById(uid);
                        // 这里不用再写IP 直接写服务名称bookservice
                        List<Book> bookList = borrow
                                .stream()
                                .map(b -> template.getForObject("http://bookservice/book/"+b.getBid(), Book.class))
                                .collect(Collectors.toList());
                        return new UserBorrowDetail(user, bookList);

                    }

浏览器访问 可以看到结果依然正确的

并且我们可以观察一下两个用户微服务的调用情况 也是以负载均衡的形式进行的

按照同样的方法 我们接着将图书管理系统服务的调用也改成接口形式

最后Service代码就变成了
                    @Service
                    public class BorrowServiceImpl implements BorrowService {
                        @Resource
                        BorrowMapper borrowMapper;
                        @Resource
                        UserClient userClient;
                        @Resource
                        BookClient bookClient;

                        @Override
                        public UserBorrowDetail getUserBorrowDetailByUid(int uid) {
                            List<Borrow> borrow = borrowMapper.getBorrowsByUid(uid);

                            User user = userClient.getUserById(uid);
                            List<Book> bookList = borrow
                                    .stream()
                                    .map(b -> bookClient.getBookById(b.getBid()))
                                    .collect(Collectors.toList());
                            return new UserBorrowDetail(user, bookList);
                        }

                    }

继续访问浏览器进行测试 OK 正常

当然 Feign也有很多的其他配置选项 这里就不多做介绍了 详细清查阅官方文档
走进SpringCloud
前面我们介绍了微服务架构的优点 那么同样的这些优点的背后也存在着诸多的问题:
    > 要实现微服务并不是说只需要简单地将项目进行拆分 我们还需要考虑对各个微服务进行管理 监控等 这样我们才能够及时地寻找和排查问题
      因此微服务往往需要的是一整套解决方案 包括服务注册和发现 容灾处理 负载均衡 配置管理等
    > 它不像单体架构那种方便维护 由于部署在多个服务器 我们不得不去保证各个微服务能够稳定运行 在管理难度上肯定高于传统单体应用的
    > 在分布式的环境下 单体应用的某些功能可能会变得比较麻烦 比如分布式事务

所以 为了更好地解决这些问题 SpringCloud正式登场

SpringCloud是Spring提供的一套分布式解决方案 集合了一些大型互联网公司的开源产品 包括诸多组件 共同组成SpringCloud框架 并且
它利用SpringBoot的开发便利性巧妙地简化了分布式系统基础设施的开发 如服务发现注册 配置中心 消息总线 负载均衡 熔断机制 数据监控等
都可用用SpringBoot的开发风格做到一键启动和部署

由于中小型公司没有独立开发自己的分布式基础设施能力 使用SpringCloud解决方案能够以最低的成本应对当前时代的业务发展

SpringCloud整体框架的亮点是非常明细的 分布式架构下的各场景 都有对应的组件来处理 比如基于Netflix(奈飞)的开源分布式解决方案提供的组件:
    > Eureka - 实现服务治理(服务注册与发现) 我们可以对所有的微服务进行集中管理 包括他们的运行状态 信息等
    > Ribbon - 为服务之间相互调用提供负载均衡算法(现在被SpringCloudLoadBalancer取代)
    > Hystrix - 断路器 保护系统 控制故障范围 暂时可以跟家里电闸的保险丝类比 当触电危险发生时能够防止进一步的发展
    > zuul - api网关 路由 负载均衡等多种作用 就像我们的路由器 可能有很多个设备都连接了路由器 但是数据包要转发给谁则是由路由器在进行(已经被SpringCloudGateway取代)
    > Config - 配置管理 可以实现配置文件集中管理

当然 这里只是进行简单的了解即可 实际上微服务的玩法非常多 我们后面的学习中将会逐步进行探索

那么首先 我们就从注册中心开始说起
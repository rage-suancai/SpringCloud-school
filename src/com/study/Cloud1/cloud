微服务基础
注意: 此阶段学习推荐的电脑配置 至少配备4核心CPU(主频3.0Ghz以上) + 16GB内存 否则卡到你怀疑人生

前面我们讲解了SpringBoot框架 通过使用SpringBoot框架 我们的项目开发速度可以说是得到了质的提升 同时我们对于项目的维护和理解 也会更加的轻松 可见 SpringBoot为我们的开发带来了巨大便捷
而这一部分 我们将基于SpringBoot 继续深入到企业实际场景 探讨微服务架构下的SpringCloud 这个部分我们会更加注重于架构设计上的讲解 弱化实现原理方面的研究

传统项目转型
要说近几年最火热的话题 那还得是微服务 那么什么是微服务呢

我们可以先从技术的演变开始看起 在我们学习javaWeb之后 一般的网站开发模式为 Servlet+JSP 但是实际上我们在学习了SSM之后 会发现这种模式已经远远落后了
第一 一个公司不可能去招那么多同时会前端+后端的开发人员 就算招到 也不一定能保证两个方面都比较擅长 相比前后端分开学习的开发人员 显然后者的学习成本更低 专注度更高
因此前后端分离成为了一种新的趋势 通过使用SpringBoot 我们几乎可以很快速地开发一个高性能的单体应用 只需要启动一个服务端 我们整项目就开始运行了 各项功能融于一体 开发起来也更加轻松

但是随着我们项目的不断扩大 单体应用似乎显得有点乏力了

随着越来越多的功能不断加入到一个SpringBoot项目中 接口不断增加 整系统就要在同一时间内响应更多类型的请求 显然 这种扩展方式是不可能无限使用下去的
总有一天 这个SpringBoot项目会庞大到运行缓慢 并且所有的功能如果都集成在单端上 那么所有的请求都会全部汇集到一台服务器上 对此服务器造成巨大压力

可以试想一下 如果我们的电脑已经升级到i9-12900k 但是依然在运行项目的时候缓慢 无法同一时间响应成千上万的请求 那么这个问题就已经不是单纯升级机器配置可以解决的了

                    xx公司电商项目                                       xx公司电商项目
                   用户登录/注册接口                                用户登录/注册接口 砍一刀接口
                   商家上架商品接口                                 商家上架假货接口 直播带货接口
                     买家购物接口 ------------------------------->   买家上当接口 9.9骗人接口   ------------------------------------> 没有办法了 老板跑路
                     物流查询接口           一年后                    物流查询接口 开屏广告接口             再过一年 用户量暴增
                       售后接口            用户提升                   黑心售后接口 千亿补贴接口        但是似乎一台服务器已经承受不起了
                         ...           功能需求量变多                                                 硬件配置已经加到最高了

传统单体架构应用随着项目规模的扩大 实际上会暴露越来越多的问题 尤其是一台服务器无法承受庞大的单体应用部署 并且单体应用的维护也会越来越困难 我们得寻找一种新的开发架构来解决这些问题了

    简而言之 微服务架构风格是一种将单个应用程序开发为一套小型服务的方法 每个服务都再自己的进程中运行 并与轻量级机制(通常是HTTP资源API) 进行通信
    这些服务是围绕业务功能构建的 可通过全自动部署机制独立部署 这些服务只有最低限度的集中管理 这些服务可以用不同的编程语言编写 并使用不同的数据存储技术

Martin Fowler在2014年提出了"微服务"架构 它是一种全新的架构风格
    > 微服务把一个庞大的单体应用拆分为一个个的小型服务 比如我们原来的图书管理项目中 有登录 注册 添加 删除 搜索等功能 那么我们可以将这些功能单独做成一个个小型的SpringBoot项目 独立运行
    > 每个小型的微服务 都可以独立部署和升级 这样 就算整个系统崩溃 那么也只会影响一个服务的运行
    > 微服务之间使用HTTP进行数据交互 不再是单体应用内部交互了 虽然这样会显得更麻烦 但是带来的好处也是很直接的 甚至能突破语言限制 使用不同的编程语言进行微服务开发 只需要使用HTTP进行数据交互即可
    > 我们可以同时购买多台主机来分别部署这些微服务 这样 单机的压力就被分散到多台机器 并且每台机器的配置不一定需要太高 这样就能节省大量的成本 同时安全性也得到很大的保证
    > 甚至同一个微服务可以同时存在多个 这样当其中一个服务器出现问题时 其他服务器也在运行同样的微服务这样就可以保证一个微服务的高可用

                    奸若磐石硕 服务器       美帝良心想 服务器       人傻钱多戴 服务器       散热缩水星 服务器       烧烤煎炸蛇 服务器
                        登录服务              注册服务              搜索服务                管理服务              借阅服务
                           |                   |                    |                     |                    |
                           |                   |                    |                     |                    |
                           |                   |                    |                     |                    |
                           |                   |                    |                     |                    |
                           |                   |                    |                     |                    |
                          -------------------------------------MySQL数据库----------------------------------------

当然 这里只是简单演示一下微服务架构 实际开发中肯定比这个复杂得多的

可见 采用微服务架构 更加能够应对当今时代下的种种考验 传统项目的开发模式 需要进行架构上的升级